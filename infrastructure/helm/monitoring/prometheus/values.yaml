# Prometheus Helm Values Configuration
# Version: 2.45.0
# Purpose: Production-grade monitoring configuration for AI-Powered Detection Platform

# Global Prometheus settings
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    environment: production
    cluster: detection-platform

# Prometheus server configuration
server:
  enabled: true
  retention: 15d
  retentionSize: 45GB
  
  # High availability deployment
  deployment:
    replicas: 2
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - prometheus
        topologyKey: kubernetes.io/hostname
    
    # Resource allocation
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    
    # Persistent storage configuration
    persistentVolume:
      enabled: true
      size: 50Gi
      storageClass: gp3
      accessModes:
        - ReadWriteOnce
  
  # Service configuration
  service:
    type: ClusterIP
    servicePort: 9090
    
  # Security context
  securityContext:
    fsGroup: 65534
    runAsUser: 65534
    runAsNonRoot: true

# AlertManager configuration
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    
    route:
      group_by: ['job', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: platform-team
      routes:
        - match:
            severity: critical
          receiver: platform-team
          repeat_interval: 1h
    
    receivers:
      - name: platform-team
        slack_configs:
          - channel: '#platform-alerts'
            send_resolved: true
            title: '{{ template "slack.default.title" . }}'
            text: '{{ template "slack.default.text" . }}'

# Service Monitors for platform components
serviceMonitors:
  api-gateway:
    enabled: true
    endpoints:
      - port: http
        path: /metrics
        interval: 15s
        scrapeTimeout: 10s
    selector:
      matchLabels:
        app: api-gateway
  
  detection-service:
    enabled: true
    endpoints:
      - port: http
        path: /metrics
        interval: 15s
        scrapeTimeout: 10s
    selector:
      matchLabels:
        app: detection-service
  
  ai-service:
    enabled: true
    endpoints:
      - port: http
        path: /metrics
        interval: 15s
        scrapeTimeout: 10s
    selector:
      matchLabels:
        app: ai-service

# Alerting rules
rules:
  platform:
    - name: HighLatency
      rules:
        - alert: APIHighLatency
          expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le)) > 2
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High API latency detected
            description: 95th percentile latency is above 2 seconds
    
    - name: HighErrorRate
      rules:
        - alert: APIHighErrorRate
          expr: sum(rate(http_requests_total{status=~"5.."}[5m])) / sum(rate(http_requests_total[5m])) > 0.1
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: High error rate detected
            description: Error rate is above 10%
    
    - name: SecurityMonitoring
      rules:
        - alert: HighFailedAuthAttempts
          expr: sum(rate(auth_failures_total[5m])) > 5
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High rate of authentication failures
            description: More than 5 authentication failures per minute
        
        - alert: APIRateLimitExceeded
          expr: sum(rate(rate_limit_exceeded_total[5m])) > 1000
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: API rate limit exceeded
            description: More than 1000 rate limit violations per minute

# Node exporter configuration
nodeExporter:
  enabled: true
  tolerations:
    - operator: Exists
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Kubernetes service discovery
kubeStateMetrics:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Storage and retention settings
storage:
  tsdb:
    retention:
      time: 15d
      size: 45GB
    outOfOrderTimeWindow: 10m

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: grafana
        - podSelector:
            matchLabels:
              app: alertmanager