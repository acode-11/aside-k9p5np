# API Gateway Deployment Configuration
# Kong Gateway Version: 2.8.1
# Kubernetes Version: 1.28+

---
# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: default
  labels:
    app: api-gateway
    component: gateway
    part-of: platform
    version: "2.8.1"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3  # High availability with multiple replicas
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployments
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
      annotations:
        checksum/config: "${CONFIG_CHECKSUM}"  # Trigger pod restart on config changes
        prometheus.io/scrape: "true"
    spec:
      # Pod distribution and anti-affinity rules
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - api-gateway
            topologyKey: kubernetes.io/hostname
      
      # Security context for enhanced pod security
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      containers:
      - name: kong
        image: kong:2.8.1-alpine
        imagePullPolicy: IfNotPresent
        
        # Container ports
        ports:
        - name: proxy
          containerPort: 8000
        - name: admin
          containerPort: 8001
        - name: metrics
          containerPort: 9542

        # Resource limits and requests
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "2000m"
            memory: "2Gi"

        # Health checks
        livenessProbe:
          httpGet:
            path: /status
            port: 8001
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /status
            port: 8001
          initialDelaySeconds: 15
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3

        startupProbe:
          httpGet:
            path: /status
            port: 8001
          failureThreshold: 30
          periodSeconds: 10

        # Environment configuration
        env:
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_DECLARATIVE_CONFIG
          value: "/usr/local/kong/declarative/kong.yml"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000 ssl http2"
        - name: KONG_ADMIN_LISTEN
          value: "127.0.0.1:8001"
        - name: KONG_SSL_CERT
          value: "/etc/kong/tls/tls.crt"
        - name: KONG_SSL_CERT_KEY
          value: "/etc/kong/tls/tls.key"

        # Volume mounts
        volumeMounts:
        - name: kong-config
          mountPath: /usr/local/kong/declarative
          readOnly: true
        - name: tls-cert
          mountPath: /etc/kong/tls
          readOnly: true

      # Volumes configuration
      volumes:
      - name: kong-config
        configMap:
          name: api-gateway-config
      - name: tls-cert
        secret:
          secretName: tls-cert

      # Zone distribution constraints
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: api-gateway

---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: default
  labels:
    app: api-gateway
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
spec:
  type: ClusterIP
  ports:
  - name: proxy
    port: 443
    targetPort: 8000
    protocol: TCP
  - name: admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: metrics
    port: 9542
    targetPort: 9542
    protocol: TCP
  selector:
    app: api-gateway

---
# Pod Disruption Budget for availability guarantees
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: default
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway