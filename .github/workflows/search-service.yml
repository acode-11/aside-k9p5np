name: Search Service CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/search-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/search-service/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: search-service
  PYTHON_VERSION: '3.11'
  CACHE_KEY_PREFIX: search-service-deps
  TRIVY_SEVERITY: HIGH,CRITICAL

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python with caching
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: src/backend/search-service/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/search-service/requirements.txt

      - name: Run tests with coverage
        run: |
          pytest src/backend/search-service/tests/ \
            --cov=src/backend/search-service \
            --cov-report=xml \
            --cov-report=html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov

  build:
    name: Build and Scan
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: src/backend/search-service
          file: src/backend/search-service/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=search-service
          cache-to: type=gha,scope=search-service,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          timeout: '10m'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-scan'

  deploy:
    name: Deploy to EKS
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          kubectl apply -f src/backend/k8s/search-service-deployment.yaml
          kubectl rollout status deployment/search-service -n search

      - name: Verify deployment
        run: |
          kubectl wait --for=condition=available \
            --timeout=300s \
            deployment/search-service \
            -n search

      - name: Run health check
        run: |
          ENDPOINT=$(kubectl get svc -n search search-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://${ENDPOINT}/health || exit 1