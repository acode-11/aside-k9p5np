name: Auth Service CI/CD

# Trigger workflow on pushes and PRs to main branch affecting auth service
on:
  push:
    branches: [main]
    paths:
      - 'src/backend/auth-service/**'
      - '.github/workflows/auth-service.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/backend/auth-service/**'
      - '.github/workflows/auth-service.yml'

# Environment variables
env:
  REGISTRY: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: auth-service
  NODE_VERSION: '20'
  TRIVY_SEVERITY: 'HIGH,CRITICAL'
  SCAN_TIMEOUT: '10m'

# Define required permissions
permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  test:
    name: Test and Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend/auth-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/backend/auth-service/package-lock.json

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Run security audit
        run: |
          npm audit
          npm run security:audit
        continue-on-error: false

      - name: Run linting
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test:coverage
        env:
          AUTH_SERVICE_KEYS: ${{ secrets.AUTH_SERVICE_KEYS }}
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          AUTH_SERVICE_KEYS: ${{ secrets.AUTH_SERVICE_KEYS }}

  build-and-scan:
    name: Build and Security Scan
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: src/backend/auth-service
          file: src/backend/auth-service/Dockerfile
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            SECURITY_SCAN_ENABLED=true
            
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          timeout: ${{ env.SCAN_TIMEOUT }}
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Push image if on main branch
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: src/backend/auth-service
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://api.detection-platform.com' || 'https://staging.api.detection-platform.com' }}
      
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          
      - name: Configure kubectl
        uses: aws-actions/eks-get-token@v1
        with:
          cluster-name: detection-platform
          
      - name: Update deployment
        run: |
          kubectl set image deployment/auth-service \
            auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --record
            
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/auth-service --timeout=300s
          
      - name: Run security verification
        run: |
          kubectl exec deploy/auth-service -- curl -f http://localhost:3001/health/security
        
      - name: Update deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: '${{ github.event.deployment_status.target_url }}',
              description: 'Deployment ${{ job.status }}',
              context: 'Auth Service Deployment'
            });