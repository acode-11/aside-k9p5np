name: Collaboration Service CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/collaboration-service/**'
      - '.github/workflows/collaboration-service.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/collaboration-service/**'
  workflow_dispatch:

env:
  SERVICE_NAME: collaboration-service
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  NODE_VERSION: '20.x'
  DOCKER_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/collaboration-service
  DEPLOYMENT_ENV: production

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: src/backend/collaboration-service/package.json

      - name: Install dependencies
        working-directory: src/backend/collaboration-service
        run: |
          npm ci
          npm audit fix

      - name: Run linting
        working-directory: src/backend/collaboration-service
        run: npm run lint

      - name: Run unit tests
        working-directory: src/backend/collaboration-service
        run: npm run test
        env:
          CI: true
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: src/backend/collaboration-service/coverage
          retention-days: 14

  security-scan:
    name: Security Scan
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk scan
        uses: snyk/actions@0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high
          docker-image: ${{ env.DOCKER_IMAGE }}:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: trivy-results.txt
          retention-days: 30

  build-and-push:
    name: Build and Push Docker Image
    needs: security-scan
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: src/backend/collaboration-service
          file: src/backend/collaboration-service/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          build-args: |
            NODE_ENV=production
            NODE_VERSION=${{ env.NODE_VERSION }}

  deploy:
    name: Deploy to Production
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production
      url: https://api.detection-platform.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Update deployment image
        run: |
          kubectl set image deployment/${{ env.SERVICE_NAME }} \
            ${{ env.SERVICE_NAME }}=${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
            -n production

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/${{ env.SERVICE_NAME }} \
            -n production \
            --timeout=300s

      - name: Verify deployment health
        run: |
          kubectl get deployment ${{ env.SERVICE_NAME }} -n production -o json | \
            jq '.status.conditions[] | select(.type=="Available")'

      - name: Configure Datadog monitoring
        uses: datadog/action@v1.2.0
        with:
          api_key: ${{ secrets.DATADOG_API_KEY }}
          app_key: ${{ secrets.DATADOG_APP_KEY }}
          service: ${{ env.SERVICE_NAME }}
          env: ${{ env.DEPLOYMENT_ENV }}
          version: ${{ github.sha }}

      - name: Notify deployment status
        if: always()
        run: |
          curl -X POST ${{ secrets.DEPLOYMENT_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "service": "${{ env.SERVICE_NAME }}",
              "status": "${{ job.status }}",
              "environment": "${{ env.DEPLOYMENT_ENV }}",
              "version": "${{ github.sha }}",
              "url": "https://api.detection-platform.com"
            }'